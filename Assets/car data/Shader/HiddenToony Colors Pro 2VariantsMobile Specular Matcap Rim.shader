Shader "Hidden/Toony Colors Pro 2/Variants/Mobile Specular Matcap Rim" {
	Properties {
		_Color ("Color", Vector) = (1,1,1,1)
		_HColor ("Highlight Color", Vector) = (0.785,0.785,0.785,1)
		_SColor ("Shadow Color", Vector) = (0.195,0.195,0.195,1)
		_MainTex ("Main Texture (RGB) Spec/MatCap Mask (A) ", 2D) = "white" {}
		[TCP2Gradient] _Ramp ("#RAMPT# Toon Ramp (RGB)", 2D) = "gray" {}
		_RampThreshold ("#RAMPF# Ramp Threshold", Range(0, 1)) = 0.5
		_RampSmooth ("#RAMPF# Ramp Smoothing", Range(0.01, 1)) = 0.1
		_BumpMap ("#NORM# Normal map (RGB)", 2D) = "bump" {}
		_SpecColor ("#SPEC# Specular Color", Vector) = (0.5,0.5,0.5,1)
		_Shininess ("#SPEC# Shininess", Range(0.01, 2)) = 0.1
		_SpecSmooth ("#SPECT# Smoothness", Range(0, 1)) = 0.05
		_RimColor ("#RIM# Rim Color", Vector) = (0.8,0.8,0.8,0.6)
		_RimMin ("#RIM# Rim Min", Range(0, 1)) = 0.5
		_RimMax ("#RIM# Rim Max", Range(0, 1)) = 1
		_RimDir ("#RIMDIR# Rim Direction", Vector) = (0,0,1,0)
		_MatCap ("#MC# MatCap (RGB)", 2D) = "black" {}
	}
	SubShader {
		LOD 200
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 22950
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0 = max(u_xlat0, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0 + u_xlat0;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_2.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_4.x = u_xlat2.x + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat16_4.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3.x = u_xlat1.x + (-_RimMin);
					    u_xlat16_8 = (-_RimMin) + _RimMax;
					    u_xlat16_8 = float(1.0) / u_xlat16_8;
					    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;
					    vs_TEXCOORD3.x = u_xlat16_3.x * _RimColor.w;
					    u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					uniform mediump sampler2D unity_Lightmap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb0 = vs_TEXCOORD6.z<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = max(u_xlat0.x, _LightShadowData.x);
					    u_xlat16_1.x = u_xlat0.x + u_xlat0.x;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD2.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					vec3 u_xlat5;
					mediump float u_xlat16_7;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz * in_NORMAL0.yyy;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat2.xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat5.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat5.xz;
					    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat1.xy;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-in_POSITION0.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_3 = u_xlat1.x + (-_RimMin);
					    u_xlat16_7 = (-_RimMin) + _RimMax;
					    u_xlat16_7 = float(1.0) / u_xlat16_7;
					    u_xlat16_3 = u_xlat16_7 * u_xlat16_3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
					#else
					    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
					#endif
					    u_xlat16_7 = u_xlat16_3 * -2.0 + 3.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_7;
					    vs_TEXCOORD3.x = u_xlat16_3 * _RimColor.w;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2D unity_Lightmap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in mediump vec3 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					float u_xlat12;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = min(u_xlat16_1.xxx, u_xlat16_5.xyz);
					    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump float u_xlat16_5;
					vec3 u_xlat9;
					mediump float u_xlat16_11;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat9.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat9.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat16_5 = u_xlat19 + (-_RimMin);
					    u_xlat16_11 = (-_RimMin) + _RimMax;
					    u_xlat16_11 = float(1.0) / u_xlat16_11;
					    u_xlat16_5 = u_xlat16_11 * u_xlat16_5;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * -2.0 + 3.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_11;
					    vs_TEXCOORD3.x = u_xlat16_5 * _RimColor.w;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump float u_xlat16_4;
					vec3 u_xlat7;
					mediump float u_xlat16_9;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat7.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat7.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat16_4 = u_xlat15 + (-_RimMin);
					    u_xlat16_9 = (-_RimMin) + _RimMax;
					    u_xlat16_9 = float(1.0) / u_xlat16_9;
					    u_xlat16_4 = u_xlat16_9 * u_xlat16_4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_4 * -2.0 + 3.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_4;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_9;
					    vs_TEXCOORD3.x = u_xlat16_4 * _RimColor.w;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.y = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec4 u_xlat6;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat3.xyz = u_xlat3.xyz * in_NORMAL0.yyy;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.xxx + u_xlat3.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat3.xyz = u_xlat4.xyz * in_NORMAL0.zzz + u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat10.xz = u_xlat3.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat3.xx + u_xlat10.xz;
					    u_xlat3.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat3.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat3.xy;
					    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat3.xyz = u_xlat3.xyz + (-in_POSITION0.xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat23 = dot(u_xlat3.xyz, in_NORMAL0.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat16_5.x = u_xlat23 + (-_RimMin);
					    u_xlat16_12 = (-_RimMin) + _RimMax;
					    u_xlat16_12 = float(1.0) / u_xlat16_12;
					    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat16_12 = u_xlat16_5.x * -2.0 + 3.0;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
					    vs_TEXCOORD3.x = u_xlat16_5.x * _RimColor.w;
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat16_5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat3 = u_xlat6 * u_xlat6 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat10_1.ww);
					    u_xlat16_2.xzw = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb5 = vs_TEXCOORD6.z<u_xlat5;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = max(u_xlat5, _LightShadowData.x);
					    u_xlat16_3.x = (-u_xlat5) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD2.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat2.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat2.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz * in_NORMAL0.yyy;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat3.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat3.xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat8.xz = u_xlat2.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat2.xx + u_xlat8.xz;
					    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat2.xy;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-in_POSITION0.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat16_4.x = u_xlat18 + (-_RimMin);
					    u_xlat16_10 = (-_RimMin) + _RimMax;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4.x * -2.0 + 3.0;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;
					    vs_TEXCOORD3.x = u_xlat16_4.x * _RimColor.w;
					    u_xlat16_4.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_4.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_7 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2.y = u_xlat16_7 * 0.5 + 0.5;
					    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
					    u_xlat15 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat15 = u_xlat15 * u_xlat16_2.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat16_1.ww);
					    u_xlat16_2.xzw = u_xlat16_1.xyz * _Color.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat5 = (-u_xlat0.x) + u_xlat5;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat16_5 * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_8.x + u_xlat16_3.x;
					    u_xlat0.x = u_xlat15 * u_xlat16_3.x;
					    u_xlat16_8.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz;
					    u_xlat15 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat15) + u_xlat16_2.y;
					    u_xlat6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat15 = (-u_xlat15) + u_xlat6;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat15 * -2.0 + 3.0;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat16_7 = u_xlat16_3.x * u_xlat15;
					    u_xlat16_3.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_3.xyz = _SColor.www * u_xlat16_3.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + _HColor.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xzw * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_0.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _MatCap;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);
					    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat10_1.xyz = texture2D(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD2.w;
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_WorldToObject[0].y;
					    u_xlat0.y = hlslcc_mtx4x4unity_WorldToObject[1].y;
					    u_xlat0.z = hlslcc_mtx4x4unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].x;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].x;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].x;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_WorldToObject[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_WorldToObject[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat3.xz = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat3.xz;
					    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD3.yz = u_xlat0.xy;
					    u_xlat0.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-in_POSITION0.xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat0.x + (-_RimMin);
					    u_xlat16_5 = (-_RimMin) + _RimMax;
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_2 = u_xlat16_5 * u_xlat16_2;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_2 * -2.0 + 3.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_5;
					    vs_TEXCOORD3.x = u_xlat16_2 * _RimColor.w;
					    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	float _RampThreshold;
					uniform 	float _RampSmooth;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	mediump vec4 _RimColor;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2D _MatCap;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat6;
					float u_xlat11;
					mediump float u_xlat16_15;
					float u_xlat16;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);
					    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat11;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6;
					    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_15 = inversesqrt(u_xlat16_15);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat1.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = _Shininess * 128.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz + u_xlat1.xyz;
					    u_xlat16_1.xyz = texture(_MatCap, vs_TEXCOORD3.yz).xyz;
					    u_xlat16_3.xyz = vs_TEXCOORD3.xxx * _RimColor.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
					    u_xlat1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat16 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
					#else
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "TCP2_DISABLE_WRAPPED_LIGHT" "TCP2_MC" }
					"!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "TCP2_MaterialInspector"
}